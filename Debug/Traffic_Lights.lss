
Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001890  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007e5  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 05 	call	0xaa4	; 0xaa4 <main>
  64:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TIMER0_voidInit>:
   Description     : initialize the timer 0
   Parameters      : -
   Return value:   :void
*******************************************************************************/
void TIMER0_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_GENERATION_MODE == TIMER0_PWM_PHASE_CORRECT_MODE
	SET_BIT(TCCR0,TCCR0_WGM00);
	CLEAR_BIT(TCCR0,TCCR0_WGM01);
#elif TIMER0_GENERATION_MODE == TIMER0_CTC_MODE
	SET_BIT(TCCR0,TCCR0_WGM01);
  74:	a3 e5       	ldi	r26, 0x53	; 83
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e3 e5       	ldi	r30, 0x53	; 83
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_WGM00);
  82:	a3 e5       	ldi	r26, 0x53	; 83
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e3 e5       	ldi	r30, 0x53	; 83
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
#else
#error "Wrong Generation mode"
#endif
	/*Compare match output mode*/
	TCCR0&=COMP_OPMODE_MASK;
  90:	a3 e5       	ldi	r26, 0x53	; 83
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e3 e5       	ldi	r30, 0x53	; 83
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7c       	andi	r24, 0xCF	; 207
  9c:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_COMPARE_OUTPUT_MODE;
  9e:	a3 e5       	ldi	r26, 0x53	; 83
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e3 e5       	ldi	r30, 0x53	; 83
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8c 93       	st	X, r24
	/*Prescaler*/
	TCCR0&=TIMER_PRESCALER_MASK;
  aa:	a3 e5       	ldi	r26, 0x53	; 83
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e3 e5       	ldi	r30, 0x53	; 83
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
  b8:	a3 e5       	ldi	r26, 0x53	; 83
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e3 e5       	ldi	r30, 0x53	; 83
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8c 93       	st	X, r24
	OCR0=250;
  c6:	ec e5       	ldi	r30, 0x5C	; 92
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8a ef       	ldi	r24, 0xFA	; 250
  cc:	80 83       	st	Z, r24
}
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <Timer0_vDelayms>:
   Parameters      : Copy_u16delay the time which you want to delay
   Return value:   : void
*******************************************************************************/

void Timer0_vDelayms(u16 Copy_u16delay)
{
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <Timer0_vDelayms+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <Timer0_vDelayms+0x8>
  dc:	00 d0       	rcall	.+0      	; 0xde <Timer0_vDelayms+0xa>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9e 83       	std	Y+6, r25	; 0x06
  e4:	8d 83       	std	Y+5, r24	; 0x05
	for(u32 i=0 ; i < (Copy_u16delay*4) ; i++)
  e6:	19 82       	std	Y+1, r1	; 0x01
  e8:	1a 82       	std	Y+2, r1	; 0x02
  ea:	1b 82       	std	Y+3, r1	; 0x03
  ec:	1c 82       	std	Y+4, r1	; 0x04
  ee:	1c c0       	rjmp	.+56     	; 0x128 <Timer0_vDelayms+0x54>
	{
		while(GET_BIT(TIFR,1)==0); //polling
  f0:	e8 e5       	ldi	r30, 0x58	; 88
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	86 95       	lsr	r24
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	90 70       	andi	r25, 0x00	; 0
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	b1 f3       	breq	.-20     	; 0xf0 <Timer0_vDelayms+0x1c>
		SET_BIT(TIFR,1);
 104:	a8 e5       	ldi	r26, 0x58	; 88
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e8 e5       	ldi	r30, 0x58	; 88
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8c 93       	st	X, r24
   Return value:   : void
*******************************************************************************/

void Timer0_vDelayms(u16 Copy_u16delay)
{
	for(u32 i=0 ; i < (Copy_u16delay*4) ; i++)
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	ab 81       	ldd	r26, Y+3	; 0x03
 118:	bc 81       	ldd	r27, Y+4	; 0x04
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	a1 1d       	adc	r26, r1
 11e:	b1 1d       	adc	r27, r1
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	ab 83       	std	Y+3, r26	; 0x03
 126:	bc 83       	std	Y+4, r27	; 0x04
 128:	8d 81       	ldd	r24, Y+5	; 0x05
 12a:	9e 81       	ldd	r25, Y+6	; 0x06
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	9c 01       	movw	r18, r24
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	ab 81       	ldd	r26, Y+3	; 0x03
 140:	bc 81       	ldd	r27, Y+4	; 0x04
 142:	82 17       	cp	r24, r18
 144:	93 07       	cpc	r25, r19
 146:	a4 07       	cpc	r26, r20
 148:	b5 07       	cpc	r27, r21
 14a:	90 f2       	brcs	.-92     	; 0xf0 <Timer0_vDelayms+0x1c>
	{
		while(GET_BIT(TIFR,1)==0); //polling
		SET_BIT(TIFR,1);
	}
}
 14c:	26 96       	adiw	r28, 0x06	; 6
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <PORT_voidInit>:
   Description     : initialize the ports directions and values
   Parameters      : -
   Return value:   :void
*******************************************************************************/
void PORT_voidInit(void)
{
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
 166:	ea e3       	ldi	r30, 0x3A	; 58
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
 16e:	e7 e3       	ldi	r30, 0x37	; 55
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
 176:	e4 e3       	ldi	r30, 0x34	; 52
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 17e:	e1 e3       	ldi	r30, 0x31	; 49
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	10 82       	st	Z, r1

	PORTA = PORTA_VAL;
 184:	eb e3       	ldi	r30, 0x3B	; 59
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	10 82       	st	Z, r1
	PORTB = PORTB_VAL;
 18a:	e8 e3       	ldi	r30, 0x38	; 56
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	10 82       	st	Z, r1
	PORTC = PORTC_VAL;
 190:	e5 e3       	ldi	r30, 0x35	; 53
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	10 82       	st	Z, r1
	PORTD = PORTD_VAL;
 196:	e2 e3       	ldi	r30, 0x32	; 50
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	80 83       	st	Z, r24

}
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <EXTI_voidINT0Init>:
   Description     : initialize the external interrupt 0
   Parameters      : -
   Return value:   :void
*******************************************************************************/
void EXTI_voidINT0Init(void)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_STATE==ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_STATE==FALLING_EDGE
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
 1ac:	a5 e5       	ldi	r26, 0x55	; 85
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e5 e5       	ldi	r30, 0x55	; 85
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
 1ba:	a5 e5       	ldi	r26, 0x55	; 85
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e5 e5       	ldi	r30, 0x55	; 85
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	8c 93       	st	X, r24
#elif INT0_STATE==RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#endif
	/*peripheral interrupt enable for int0*/
	SET_BIT(GICR,GICR_INT0);
 1c8:	ab e5       	ldi	r26, 0x5B	; 91
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	eb e5       	ldi	r30, 0x5B	; 91
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	8c 93       	st	X, r24

}
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <EXTI_voidINT1Init>:
   Description     : initialize the external interrupt 1
   Parameters      : -
   Return value:   :void
*******************************************************************************/
void EXTI_voidINT1Init(void)
{
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_STATE==ANY_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLEAR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_STATE==FALLING_EDGE
	CLEAR_BIT(MCUCR,MCUCR_ISC10);
 1e4:	a5 e5       	ldi	r26, 0x55	; 85
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e5 e5       	ldi	r30, 0x55	; 85
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
 1f2:	a5 e5       	ldi	r26, 0x55	; 85
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e5 e5       	ldi	r30, 0x55	; 85
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);
	SET_BIT(MCUCR,MCUCR_ISC11);
#endif

	/*peripheral interrupt enable for int0*/
	SET_BIT(GICR,GICR_INT1);
 200:	ab e5       	ldi	r26, 0x5B	; 91
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	eb e5       	ldi	r30, 0x5B	; 91
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	8c 93       	st	X, r24
}
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <EXTI_voidINT2Init>:
   Description     : initialize the external interrupt 2
   Parameters      : -
   Return value:   :void
*******************************************************************************/
void EXTI_voidINT2Init(void)
{
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62

#if INT2_STATE==FALLING_EDGE
	CLEAR_BIT(MCUCSR,MCUCSR_INT2);
 21c:	a4 e5       	ldi	r26, 0x54	; 84
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e5       	ldi	r30, 0x54	; 84
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 7b       	andi	r24, 0xBF	; 191
 228:	8c 93       	st	X, r24
#elif INT2_STATE==RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_INT2);
#endif
	/*peripheral interrupt enable for int2*/
	SET_BIT(GICR,GICR_INT2);
 22a:	ab e5       	ldi	r26, 0x5B	; 91
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	eb e5       	ldi	r30, 0x5B	; 91
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 62       	ori	r24, 0x20	; 32
 236:	8c 93       	st	X, r24
}
 238:	cf 91       	pop	r28
 23a:	df 91       	pop	r29
 23c:	08 95       	ret

0000023e <GIE_voidEnable>:
   Parameters      : -
   Return value:   : void
*******************************************************************************/

void GIE_voidEnable(void)
{
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 246:	af e5       	ldi	r26, 0x5F	; 95
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	ef e5       	ldi	r30, 0x5F	; 95
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8c 93       	st	X, r24
}
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <GIE_voidDisable>:
   Description     : Set Global Interrupt Disable
   Parameters      : -
   Return value:   : void
*******************************************************************************/
void GIE_voidDisable(void)
{
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
 262:	af e5       	ldi	r26, 0x5F	; 95
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	ef e5       	ldi	r30, 0x5F	; 95
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8f 77       	andi	r24, 0x7F	; 127
 26e:	8c 93       	st	X, r24
}
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <DIO_u8SetPinValue>:
 *
 * Return value:   : Local_u8ErrorState  E_OK
 *                                       E_NOK
 *******************************************************************************/
u8 DIO_u8SetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Value)
{
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	28 97       	sbiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
 28e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 290:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin<= DIO_u8PIN7)
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	88 30       	cpi	r24, 0x08	; 8
 296:	08 f0       	brcs	.+2      	; 0x29a <DIO_u8SetPinValue+0x24>
 298:	f6 c0       	rjmp	.+492    	; 0x486 <DIO_u8SetPinValue+0x210>
	{
		if(copy_u8Value==DIO_u8PIN_HIGH)
 29a:	8c 81       	ldd	r24, Y+4	; 0x04
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	09 f0       	breq	.+2      	; 0x2a2 <DIO_u8SetPinValue+0x2c>
 2a0:	73 c0       	rjmp	.+230    	; 0x388 <DIO_u8SetPinValue+0x112>
		{
			switch (copy_u8Port)
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	38 87       	std	Y+8, r19	; 0x08
 2aa:	2f 83       	std	Y+7, r18	; 0x07
 2ac:	8f 81       	ldd	r24, Y+7	; 0x07
 2ae:	98 85       	ldd	r25, Y+8	; 0x08
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	91 05       	cpc	r25, r1
 2b4:	51 f1       	breq	.+84     	; 0x30a <DIO_u8SetPinValue+0x94>
 2b6:	2f 81       	ldd	r18, Y+7	; 0x07
 2b8:	38 85       	ldd	r19, Y+8	; 0x08
 2ba:	23 30       	cpi	r18, 0x03	; 3
 2bc:	31 05       	cpc	r19, r1
 2be:	34 f4       	brge	.+12     	; 0x2cc <DIO_u8SetPinValue+0x56>
 2c0:	8f 81       	ldd	r24, Y+7	; 0x07
 2c2:	98 85       	ldd	r25, Y+8	; 0x08
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	91 05       	cpc	r25, r1
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_u8SetPinValue+0x6c>
 2ca:	5b c0       	rjmp	.+182    	; 0x382 <DIO_u8SetPinValue+0x10c>
 2cc:	2f 81       	ldd	r18, Y+7	; 0x07
 2ce:	38 85       	ldd	r19, Y+8	; 0x08
 2d0:	23 30       	cpi	r18, 0x03	; 3
 2d2:	31 05       	cpc	r19, r1
 2d4:	71 f1       	breq	.+92     	; 0x332 <DIO_u8SetPinValue+0xbc>
 2d6:	8f 81       	ldd	r24, Y+7	; 0x07
 2d8:	98 85       	ldd	r25, Y+8	; 0x08
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	91 05       	cpc	r25, r1
 2de:	e9 f1       	breq	.+122    	; 0x35a <DIO_u8SetPinValue+0xe4>
 2e0:	50 c0       	rjmp	.+160    	; 0x382 <DIO_u8SetPinValue+0x10c>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,copy_u8Pin); break;
 2e2:	ab e3       	ldi	r26, 0x3B	; 59
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	eb e3       	ldi	r30, 0x3B	; 59
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8SetPinValue+0x8a>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8SetPinValue+0x86>
 304:	84 2b       	or	r24, r20
 306:	8c 93       	st	X, r24
 308:	c0 c0       	rjmp	.+384    	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTB: SET_BIT(PORTB,copy_u8Pin); break;
 30a:	a8 e3       	ldi	r26, 0x38	; 56
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8SetPinValue+0xb2>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8SetPinValue+0xae>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	ac c0       	rjmp	.+344    	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTC: SET_BIT(PORTC,copy_u8Pin); break;
 332:	a5 e3       	ldi	r26, 0x35	; 53
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e5 e3       	ldi	r30, 0x35	; 53
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_u8SetPinValue+0xda>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_u8SetPinValue+0xd6>
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	98 c0       	rjmp	.+304    	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTD: SET_BIT(PORTD,copy_u8Pin); break;
 35a:	a2 e3       	ldi	r26, 0x32	; 50
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8SetPinValue+0x102>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8SetPinValue+0xfe>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	84 c0       	rjmp	.+264    	; 0x48a <DIO_u8SetPinValue+0x214>
			default: Local_u8ErrorState=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	89 83       	std	Y+1, r24	; 0x01
 386:	81 c0       	rjmp	.+258    	; 0x48a <DIO_u8SetPinValue+0x214>
			}
		}
		else if(copy_u8Value==DIO_u8PIN_LOW)
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	88 23       	and	r24, r24
 38c:	09 f0       	breq	.+2      	; 0x390 <DIO_u8SetPinValue+0x11a>
 38e:	78 c0       	rjmp	.+240    	; 0x480 <DIO_u8SetPinValue+0x20a>
		{
			switch (copy_u8Port)
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	3e 83       	std	Y+6, r19	; 0x06
 398:	2d 83       	std	Y+5, r18	; 0x05
 39a:	8d 81       	ldd	r24, Y+5	; 0x05
 39c:	9e 81       	ldd	r25, Y+6	; 0x06
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	91 05       	cpc	r25, r1
 3a2:	61 f1       	breq	.+88     	; 0x3fc <DIO_u8SetPinValue+0x186>
 3a4:	2d 81       	ldd	r18, Y+5	; 0x05
 3a6:	3e 81       	ldd	r19, Y+6	; 0x06
 3a8:	23 30       	cpi	r18, 0x03	; 3
 3aa:	31 05       	cpc	r19, r1
 3ac:	34 f4       	brge	.+12     	; 0x3ba <DIO_u8SetPinValue+0x144>
 3ae:	8d 81       	ldd	r24, Y+5	; 0x05
 3b0:	9e 81       	ldd	r25, Y+6	; 0x06
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	91 05       	cpc	r25, r1
 3b6:	69 f0       	breq	.+26     	; 0x3d2 <DIO_u8SetPinValue+0x15c>
 3b8:	60 c0       	rjmp	.+192    	; 0x47a <DIO_u8SetPinValue+0x204>
 3ba:	2d 81       	ldd	r18, Y+5	; 0x05
 3bc:	3e 81       	ldd	r19, Y+6	; 0x06
 3be:	23 30       	cpi	r18, 0x03	; 3
 3c0:	31 05       	cpc	r19, r1
 3c2:	89 f1       	breq	.+98     	; 0x426 <DIO_u8SetPinValue+0x1b0>
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	84 30       	cpi	r24, 0x04	; 4
 3ca:	91 05       	cpc	r25, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_u8SetPinValue+0x15a>
 3ce:	40 c0       	rjmp	.+128    	; 0x450 <DIO_u8SetPinValue+0x1da>
 3d0:	54 c0       	rjmp	.+168    	; 0x47a <DIO_u8SetPinValue+0x204>
			{
			case DIO_u8PORTA: CLEAR_BIT(PORTA,copy_u8Pin); break;
 3d2:	ab e3       	ldi	r26, 0x3B	; 59
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	eb e3       	ldi	r30, 0x3B	; 59
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_u8SetPinValue+0x17a>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_u8SetPinValue+0x176>
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	8c 93       	st	X, r24
 3fa:	47 c0       	rjmp	.+142    	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTB: CLEAR_BIT(PORTB,copy_u8Pin); break;
 3fc:	a8 e3       	ldi	r26, 0x38	; 56
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e8 e3       	ldi	r30, 0x38	; 56
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8SetPinValue+0x1a4>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8SetPinValue+0x1a0>
 41e:	80 95       	com	r24
 420:	84 23       	and	r24, r20
 422:	8c 93       	st	X, r24
 424:	32 c0       	rjmp	.+100    	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTC: CLEAR_BIT(PORTC,copy_u8Pin); break;
 426:	a5 e3       	ldi	r26, 0x35	; 53
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e5 e3       	ldi	r30, 0x35	; 53
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8SetPinValue+0x1ce>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8SetPinValue+0x1ca>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	1d c0       	rjmp	.+58     	; 0x48a <DIO_u8SetPinValue+0x214>
			case DIO_u8PORTD: CLEAR_BIT(PORTD,copy_u8Pin); break;
 450:	a2 e3       	ldi	r26, 0x32	; 50
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e2 e3       	ldi	r30, 0x32	; 50
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_u8SetPinValue+0x1f8>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_u8SetPinValue+0x1f4>
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	8c 93       	st	X, r24
 478:	08 c0       	rjmp	.+16     	; 0x48a <DIO_u8SetPinValue+0x214>
			default: Local_u8ErrorState=1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	89 83       	std	Y+1, r24	; 0x01
 47e:	05 c0       	rjmp	.+10     	; 0x48a <DIO_u8SetPinValue+0x214>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_u8SetPinValue+0x214>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
}
 48c:	28 96       	adiw	r28, 0x08	; 8
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <DIO_u8TogglePinValue>:
 *
 * Return value:   : Local_u8ErrorState  E_OK
 *                                       E_NOK
 *******************************************************************************/
u8 DIO_u8TogglePinValue(u8 copy_u8Port , u8 copy_u8Pin)
{
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <DIO_u8TogglePinValue+0x6>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <DIO_u8TogglePinValue+0x8>
 4a6:	0f 92       	push	r0
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	8a 83       	std	Y+2, r24	; 0x02
 4ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 4b0:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Pin<= DIO_u8PIN7)
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	88 30       	cpi	r24, 0x08	; 8
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <DIO_u8TogglePinValue+0x1c>
 4b8:	73 c0       	rjmp	.+230    	; 0x5a0 <DIO_u8TogglePinValue+0x102>
	{

		switch (copy_u8Port)
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	3d 83       	std	Y+5, r19	; 0x05
 4c2:	2c 83       	std	Y+4, r18	; 0x04
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	9d 81       	ldd	r25, Y+5	; 0x05
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	91 05       	cpc	r25, r1
 4cc:	51 f1       	breq	.+84     	; 0x522 <DIO_u8TogglePinValue+0x84>
 4ce:	2c 81       	ldd	r18, Y+4	; 0x04
 4d0:	3d 81       	ldd	r19, Y+5	; 0x05
 4d2:	23 30       	cpi	r18, 0x03	; 3
 4d4:	31 05       	cpc	r19, r1
 4d6:	34 f4       	brge	.+12     	; 0x4e4 <DIO_u8TogglePinValue+0x46>
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	9d 81       	ldd	r25, Y+5	; 0x05
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	91 05       	cpc	r25, r1
 4e0:	61 f0       	breq	.+24     	; 0x4fa <DIO_u8TogglePinValue+0x5c>
 4e2:	5b c0       	rjmp	.+182    	; 0x59a <DIO_u8TogglePinValue+0xfc>
 4e4:	2c 81       	ldd	r18, Y+4	; 0x04
 4e6:	3d 81       	ldd	r19, Y+5	; 0x05
 4e8:	23 30       	cpi	r18, 0x03	; 3
 4ea:	31 05       	cpc	r19, r1
 4ec:	71 f1       	breq	.+92     	; 0x54a <DIO_u8TogglePinValue+0xac>
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	9d 81       	ldd	r25, Y+5	; 0x05
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	91 05       	cpc	r25, r1
 4f6:	e9 f1       	breq	.+122    	; 0x572 <DIO_u8TogglePinValue+0xd4>
 4f8:	50 c0       	rjmp	.+160    	; 0x59a <DIO_u8TogglePinValue+0xfc>
		{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA,copy_u8Pin); break;
 4fa:	ab e3       	ldi	r26, 0x3B	; 59
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	eb e3       	ldi	r30, 0x3B	; 59
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_u8TogglePinValue+0x7a>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_u8TogglePinValue+0x76>
 51c:	84 27       	eor	r24, r20
 51e:	8c 93       	st	X, r24
 520:	41 c0       	rjmp	.+130    	; 0x5a4 <DIO_u8TogglePinValue+0x106>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB,copy_u8Pin); break;
 522:	a8 e3       	ldi	r26, 0x38	; 56
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	e8 e3       	ldi	r30, 0x38	; 56
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	48 2f       	mov	r20, r24
 52e:	8b 81       	ldd	r24, Y+3	; 0x03
 530:	28 2f       	mov	r18, r24
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 2e       	mov	r0, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_u8TogglePinValue+0xa2>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	0a 94       	dec	r0
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_u8TogglePinValue+0x9e>
 544:	84 27       	eor	r24, r20
 546:	8c 93       	st	X, r24
 548:	2d c0       	rjmp	.+90     	; 0x5a4 <DIO_u8TogglePinValue+0x106>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC,copy_u8Pin); break;
 54a:	a5 e3       	ldi	r26, 0x35	; 53
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e5 e3       	ldi	r30, 0x35	; 53
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	48 2f       	mov	r20, r24
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 2e       	mov	r0, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_u8TogglePinValue+0xca>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	0a 94       	dec	r0
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_u8TogglePinValue+0xc6>
 56c:	84 27       	eor	r24, r20
 56e:	8c 93       	st	X, r24
 570:	19 c0       	rjmp	.+50     	; 0x5a4 <DIO_u8TogglePinValue+0x106>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD,copy_u8Pin); break;
 572:	a2 e3       	ldi	r26, 0x32	; 50
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	e2 e3       	ldi	r30, 0x32	; 50
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	48 2f       	mov	r20, r24
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 2e       	mov	r0, r18
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_u8TogglePinValue+0xf2>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	0a 94       	dec	r0
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_u8TogglePinValue+0xee>
 594:	84 27       	eor	r24, r20
 596:	8c 93       	st	X, r24
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <DIO_u8TogglePinValue+0x106>
		default: Local_u8ErrorState=1;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	89 83       	std	Y+1, r24	; 0x01
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_u8TogglePinValue+0x106>
		}

	}
	else
	{
		Local_u8ErrorState=1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 5a4:	89 81       	ldd	r24, Y+1	; 0x01

}
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	cf 91       	pop	r28
 5b2:	df 91       	pop	r29
 5b4:	08 95       	ret

000005b6 <DIO_u8SetPortValue>:
 *
 * Return value:   : Local_u8ErrorState  E_OK
 *                                       E_NOK
 *******************************************************************************/
u8 DIO_u8SetPortValue(u8 copy_u8Port , u8 copy_u8Value)
{
 5b6:	df 93       	push	r29
 5b8:	cf 93       	push	r28
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <DIO_u8SetPortValue+0x6>
 5bc:	00 d0       	rcall	.+0      	; 0x5be <DIO_u8SetPortValue+0x8>
 5be:	0f 92       	push	r0
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	8a 83       	std	Y+2, r24	; 0x02
 5c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 5c8:	19 82       	std	Y+1, r1	; 0x01

	switch (copy_u8Port)
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	3d 83       	std	Y+5, r19	; 0x05
 5d2:	2c 83       	std	Y+4, r18	; 0x04
 5d4:	8c 81       	ldd	r24, Y+4	; 0x04
 5d6:	9d 81       	ldd	r25, Y+5	; 0x05
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	91 05       	cpc	r25, r1
 5dc:	d9 f0       	breq	.+54     	; 0x614 <DIO_u8SetPortValue+0x5e>
 5de:	2c 81       	ldd	r18, Y+4	; 0x04
 5e0:	3d 81       	ldd	r19, Y+5	; 0x05
 5e2:	23 30       	cpi	r18, 0x03	; 3
 5e4:	31 05       	cpc	r19, r1
 5e6:	34 f4       	brge	.+12     	; 0x5f4 <DIO_u8SetPortValue+0x3e>
 5e8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ea:	9d 81       	ldd	r25, Y+5	; 0x05
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	91 05       	cpc	r25, r1
 5f0:	61 f0       	breq	.+24     	; 0x60a <DIO_u8SetPortValue+0x54>
 5f2:	1f c0       	rjmp	.+62     	; 0x632 <DIO_u8SetPortValue+0x7c>
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	23 30       	cpi	r18, 0x03	; 3
 5fa:	31 05       	cpc	r19, r1
 5fc:	81 f0       	breq	.+32     	; 0x61e <DIO_u8SetPortValue+0x68>
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	9d 81       	ldd	r25, Y+5	; 0x05
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	91 05       	cpc	r25, r1
 606:	81 f0       	breq	.+32     	; 0x628 <DIO_u8SetPortValue+0x72>
 608:	14 c0       	rjmp	.+40     	; 0x632 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8PORTA: PORTA=copy_u8Value ; break;
 60a:	eb e3       	ldi	r30, 0x3B	; 59
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	8b 81       	ldd	r24, Y+3	; 0x03
 610:	80 83       	st	Z, r24
 612:	11 c0       	rjmp	.+34     	; 0x636 <DIO_u8SetPortValue+0x80>
	case DIO_u8PORTB: PORTB=copy_u8Value ; break;
 614:	e8 e3       	ldi	r30, 0x38	; 56
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	80 83       	st	Z, r24
 61c:	0c c0       	rjmp	.+24     	; 0x636 <DIO_u8SetPortValue+0x80>
	case DIO_u8PORTC: PORTC=copy_u8Value ; break;
 61e:	e5 e3       	ldi	r30, 0x35	; 53
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	80 83       	st	Z, r24
 626:	07 c0       	rjmp	.+14     	; 0x636 <DIO_u8SetPortValue+0x80>
	case DIO_u8PORTD: PORTD=copy_u8Value ; break;
 628:	e2 e3       	ldi	r30, 0x32	; 50
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	80 83       	st	Z, r24
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_u8SetPortValue+0x80>
	default: Local_u8ErrorState=1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 636:	89 81       	ldd	r24, Y+1	; 0x01
}
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	cf 91       	pop	r28
 644:	df 91       	pop	r29
 646:	08 95       	ret

00000648 <DIO_u8GetPinValue>:
 *
 * Return value:   : Local_u8ErrorState  E_OK
 *                                       E_NOK
 *******************************************************************************/
u8 DIO_u8GetPinValue(u8 copy_u8Port , u8 copy_u8Pin ,u8* copy_Pu8Value)
{
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	27 97       	sbiw	r28, 0x07	; 7
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	8a 83       	std	Y+2, r24	; 0x02
 65e:	6b 83       	std	Y+3, r22	; 0x03
 660:	5d 83       	std	Y+5, r21	; 0x05
 662:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 664:	19 82       	std	Y+1, r1	; 0x01

	if((copy_Pu8Value!=NULL) && (copy_u8Pin<=DIO_u8PIN7))
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	09 f4       	brne	.+2      	; 0x670 <DIO_u8GetPinValue+0x28>
 66e:	78 c0       	rjmp	.+240    	; 0x760 <DIO_u8GetPinValue+0x118>
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	08 f0       	brcs	.+2      	; 0x678 <DIO_u8GetPinValue+0x30>
 676:	74 c0       	rjmp	.+232    	; 0x760 <DIO_u8GetPinValue+0x118>
	{
		switch (copy_u8Port)
 678:	8a 81       	ldd	r24, Y+2	; 0x02
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	3f 83       	std	Y+7, r19	; 0x07
 680:	2e 83       	std	Y+6, r18	; 0x06
 682:	4e 81       	ldd	r20, Y+6	; 0x06
 684:	5f 81       	ldd	r21, Y+7	; 0x07
 686:	42 30       	cpi	r20, 0x02	; 2
 688:	51 05       	cpc	r21, r1
 68a:	59 f1       	breq	.+86     	; 0x6e2 <DIO_u8GetPinValue+0x9a>
 68c:	8e 81       	ldd	r24, Y+6	; 0x06
 68e:	9f 81       	ldd	r25, Y+7	; 0x07
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	91 05       	cpc	r25, r1
 694:	34 f4       	brge	.+12     	; 0x6a2 <DIO_u8GetPinValue+0x5a>
 696:	2e 81       	ldd	r18, Y+6	; 0x06
 698:	3f 81       	ldd	r19, Y+7	; 0x07
 69a:	21 30       	cpi	r18, 0x01	; 1
 69c:	31 05       	cpc	r19, r1
 69e:	69 f0       	breq	.+26     	; 0x6ba <DIO_u8GetPinValue+0x72>
 6a0:	5c c0       	rjmp	.+184    	; 0x75a <DIO_u8GetPinValue+0x112>
 6a2:	4e 81       	ldd	r20, Y+6	; 0x06
 6a4:	5f 81       	ldd	r21, Y+7	; 0x07
 6a6:	43 30       	cpi	r20, 0x03	; 3
 6a8:	51 05       	cpc	r21, r1
 6aa:	79 f1       	breq	.+94     	; 0x70a <DIO_u8GetPinValue+0xc2>
 6ac:	8e 81       	ldd	r24, Y+6	; 0x06
 6ae:	9f 81       	ldd	r25, Y+7	; 0x07
 6b0:	84 30       	cpi	r24, 0x04	; 4
 6b2:	91 05       	cpc	r25, r1
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <DIO_u8GetPinValue+0x70>
 6b6:	3d c0       	rjmp	.+122    	; 0x732 <DIO_u8GetPinValue+0xea>
 6b8:	50 c0       	rjmp	.+160    	; 0x75a <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *copy_Pu8Value= GET_BIT(PINA,copy_u8Pin); break;
 6ba:	e9 e3       	ldi	r30, 0x39	; 57
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	a9 01       	movw	r20, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_u8GetPinValue+0x8a>
 6ce:	55 95       	asr	r21
 6d0:	47 95       	ror	r20
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_u8GetPinValue+0x86>
 6d6:	ca 01       	movw	r24, r20
 6d8:	81 70       	andi	r24, 0x01	; 1
 6da:	ec 81       	ldd	r30, Y+4	; 0x04
 6dc:	fd 81       	ldd	r31, Y+5	; 0x05
 6de:	80 83       	st	Z, r24
 6e0:	41 c0       	rjmp	.+130    	; 0x764 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *copy_Pu8Value= GET_BIT(PINB,copy_u8Pin); break;
 6e2:	e6 e3       	ldi	r30, 0x36	; 54
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	88 2f       	mov	r24, r24
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	a9 01       	movw	r20, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8GetPinValue+0xb2>
 6f6:	55 95       	asr	r21
 6f8:	47 95       	ror	r20
 6fa:	8a 95       	dec	r24
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_u8GetPinValue+0xae>
 6fe:	ca 01       	movw	r24, r20
 700:	81 70       	andi	r24, 0x01	; 1
 702:	ec 81       	ldd	r30, Y+4	; 0x04
 704:	fd 81       	ldd	r31, Y+5	; 0x05
 706:	80 83       	st	Z, r24
 708:	2d c0       	rjmp	.+90     	; 0x764 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *copy_Pu8Value= GET_BIT(PINC,copy_u8Pin); break;
 70a:	e3 e3       	ldi	r30, 0x33	; 51
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	88 2f       	mov	r24, r24
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	a9 01       	movw	r20, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_u8GetPinValue+0xda>
 71e:	55 95       	asr	r21
 720:	47 95       	ror	r20
 722:	8a 95       	dec	r24
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_u8GetPinValue+0xd6>
 726:	ca 01       	movw	r24, r20
 728:	81 70       	andi	r24, 0x01	; 1
 72a:	ec 81       	ldd	r30, Y+4	; 0x04
 72c:	fd 81       	ldd	r31, Y+5	; 0x05
 72e:	80 83       	st	Z, r24
 730:	19 c0       	rjmp	.+50     	; 0x764 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *copy_Pu8Value= GET_BIT(PIND,copy_u8Pin); break;
 732:	e0 e3       	ldi	r30, 0x30	; 48
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	88 2f       	mov	r24, r24
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	a9 01       	movw	r20, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_u8GetPinValue+0x102>
 746:	55 95       	asr	r21
 748:	47 95       	ror	r20
 74a:	8a 95       	dec	r24
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_u8GetPinValue+0xfe>
 74e:	ca 01       	movw	r24, r20
 750:	81 70       	andi	r24, 0x01	; 1
 752:	ec 81       	ldd	r30, Y+4	; 0x04
 754:	fd 81       	ldd	r31, Y+5	; 0x05
 756:	80 83       	st	Z, r24
 758:	05 c0       	rjmp	.+10     	; 0x764 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 764:	89 81       	ldd	r24, Y+1	; 0x01

}
 766:	27 96       	adiw	r28, 0x07	; 7
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <LED_Init>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/PORT/PORT_interface.h"

void LED_Init(void)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 780:	0e 94 af 00 	call	0x15e	; 0x15e <PORT_voidInit>
}
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <LED_voidON>:

void LED_voidON(u8 copy_u8Port,u8 copy_u8Pin)
{
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	00 d0       	rcall	.+0      	; 0x790 <LED_voidON+0x6>
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(copy_u8Port,copy_u8Pin,DIO_u8PIN_HIGH);
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	6a 81       	ldd	r22, Y+2	; 0x02
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_u8SetPinValue>
}
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	08 95       	ret

000007ac <LED_voidOFF>:

void LED_voidOFF(u8 copy_u8Port,u8 copy_u8Pin)
{
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <LED_voidOFF+0x6>
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	89 83       	std	Y+1, r24	; 0x01
 7b8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(copy_u8Port,copy_u8Pin,DIO_u8PIN_LOW);
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	6a 81       	ldd	r22, Y+2	; 0x02
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_u8SetPinValue>
}
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <LED_voidTOGGLE>:


void LED_voidTOGGLE(u8 copy_u8Port,u8 copy_u8Pin)
{
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <LED_voidTOGGLE+0x6>
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	89 83       	std	Y+1, r24	; 0x01
 7da:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8TogglePinValue(copy_u8Port,copy_u8Pin);
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	6a 81       	ldd	r22, Y+2	; 0x02
 7e0:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_u8TogglePinValue>
}
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	cf 91       	pop	r28
 7ea:	df 91       	pop	r29
 7ec:	08 95       	ret

000007ee <Button_Init>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/INTERRUPT/interrupt_interface.h"
#include "../../MCAL/Timer/TIMER_interface.h"

void Button_Init(void)
{
 7ee:	df 93       	push	r29
 7f0:	cf 93       	push	r28
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidINT0Init();
 7f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <EXTI_voidINT0Init>
	TIMER0_voidInit();
 7fa:	0e 94 36 00 	call	0x6c	; 0x6c <TIMER0_voidInit>
	GIE_voidEnable();
 7fe:	0e 94 1f 01 	call	0x23e	; 0x23e <GIE_voidEnable>
}
 802:	cf 91       	pop	r28
 804:	df 91       	pop	r29
 806:	08 95       	ret

00000808 <Button_GetState>:


u8 Button_GetState(void)
{
 808:	df 93       	push	r29
 80a:	cf 93       	push	r28
 80c:	0f 92       	push	r0
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
	u8 State;
	DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2,&State);
 812:	84 e0       	ldi	r24, 0x04	; 4
 814:	62 e0       	ldi	r22, 0x02	; 2
 816:	9e 01       	movw	r18, r28
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	a9 01       	movw	r20, r18
 81e:	0e 94 24 03 	call	0x648	; 0x648 <DIO_u8GetPinValue>
	return State;
 822:	89 81       	ldd	r24, Y+1	; 0x01
}
 824:	0f 90       	pop	r0
 826:	cf 91       	pop	r28
 828:	df 91       	pop	r29
 82a:	08 95       	ret

0000082c <App_Start>:

#include "app.h"


void App_Start(void)
{
 82c:	df 93       	push	r29
 82e:	cf 93       	push	r28
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
	LED_Init();
 834:	0e 94 bc 03 	call	0x778	; 0x778 <LED_Init>
	Button_Init();
 838:	0e 94 f7 03 	call	0x7ee	; 0x7ee <Button_Init>
	TIMER0_voidInit();
 83c:	0e 94 36 00 	call	0x6c	; 0x6c <TIMER0_voidInit>
}
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	08 95       	ret

00000846 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	2f 93       	push	r18
 852:	3f 93       	push	r19
 854:	4f 93       	push	r20
 856:	5f 93       	push	r21
 858:	6f 93       	push	r22
 85a:	7f 93       	push	r23
 85c:	8f 93       	push	r24
 85e:	9f 93       	push	r25
 860:	af 93       	push	r26
 862:	bf 93       	push	r27
 864:	ef 93       	push	r30
 866:	ff 93       	push	r31
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	29 97       	sbiw	r28, 0x09	; 9
 872:	de bf       	out	0x3e, r29	; 62
 874:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RedState;
	u8 Local_u8GreenState;
	u32 Local_Counter=0;
 876:	1c 82       	std	Y+4, r1	; 0x04
 878:	1d 82       	std	Y+5, r1	; 0x05
 87a:	1e 82       	std	Y+6, r1	; 0x06
 87c:	1f 82       	std	Y+7, r1	; 0x07
 87e:	0b c0       	rjmp	.+22     	; 0x896 <__stack+0x37>
	while(Button_GetState()==0 && Local_Counter < TIMEOUT)
	{
		Local_Counter++;
 880:	8c 81       	ldd	r24, Y+4	; 0x04
 882:	9d 81       	ldd	r25, Y+5	; 0x05
 884:	ae 81       	ldd	r26, Y+6	; 0x06
 886:	bf 81       	ldd	r27, Y+7	; 0x07
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	a1 1d       	adc	r26, r1
 88c:	b1 1d       	adc	r27, r1
 88e:	8c 83       	std	Y+4, r24	; 0x04
 890:	9d 83       	std	Y+5, r25	; 0x05
 892:	ae 83       	std	Y+6, r26	; 0x06
 894:	bf 83       	std	Y+7, r27	; 0x07
void __vector_1 (void)
{
	u8 Local_u8RedState;
	u8 Local_u8GreenState;
	u32 Local_Counter=0;
	while(Button_GetState()==0 && Local_Counter < TIMEOUT)
 896:	0e 94 04 04 	call	0x808	; 0x808 <Button_GetState>
 89a:	88 23       	and	r24, r24
 89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
 89e:	8c 81       	ldd	r24, Y+4	; 0x04
 8a0:	9d 81       	ldd	r25, Y+5	; 0x05
 8a2:	ae 81       	ldd	r26, Y+6	; 0x06
 8a4:	bf 81       	ldd	r27, Y+7	; 0x07
 8a6:	80 35       	cpi	r24, 0x50	; 80
 8a8:	23 ec       	ldi	r18, 0xC3	; 195
 8aa:	92 07       	cpc	r25, r18
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	a2 07       	cpc	r26, r18
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	b2 07       	cpc	r27, r18
 8b4:	28 f3       	brcs	.-54     	; 0x880 <__stack+0x21>
	{
		Local_Counter++;
	}
	if(Local_Counter<TIMEOUT)
 8b6:	8c 81       	ldd	r24, Y+4	; 0x04
 8b8:	9d 81       	ldd	r25, Y+5	; 0x05
 8ba:	ae 81       	ldd	r26, Y+6	; 0x06
 8bc:	bf 81       	ldd	r27, Y+7	; 0x07
 8be:	80 35       	cpi	r24, 0x50	; 80
 8c0:	23 ec       	ldi	r18, 0xC3	; 195
 8c2:	92 07       	cpc	r25, r18
 8c4:	20 e0       	ldi	r18, 0x00	; 0
 8c6:	a2 07       	cpc	r26, r18
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	b2 07       	cpc	r27, r18
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <__stack+0x71>
 8ce:	d4 c0       	rjmp	.+424    	; 0xa78 <__stack+0x219>
	{
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN0,&Local_u8RedState);
 8d0:	9e 01       	movw	r18, r28
 8d2:	28 5f       	subi	r18, 0xF8	; 248
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	a9 01       	movw	r20, r18
 8dc:	0e 94 24 03 	call	0x648	; 0x648 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN2,&Local_u8GreenState);
 8e0:	9e 01       	movw	r18, r28
 8e2:	27 5f       	subi	r18, 0xF7	; 247
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	a9 01       	movw	r20, r18
 8ec:	0e 94 24 03 	call	0x648	; 0x648 <DIO_u8GetPinValue>
		if(Local_u8RedState==ON) //CHEEK IF RED IS ON
 8f0:	88 85       	ldd	r24, Y+8	; 0x08
 8f2:	81 30       	cpi	r24, 0x01	; 1
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__stack+0x99>
 8f6:	49 c0       	rjmp	.+146    	; 0x98a <__stack+0x12b>
		{
			LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			LED_voidON(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN ON
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	62 e0       	ldi	r22, 0x02	; 2
 904:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			Timer0_vDelayms(5000);
 908:	88 e8       	ldi	r24, 0x88	; 136
 90a:	93 e1       	ldi	r25, 0x13	; 19
 90c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN OFF
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	62 e0       	ldi	r22, 0x02	; 2
 91c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			for(u8 i=0;i<10;i++)
 920:	1b 82       	std	Y+3, r1	; 0x03
 922:	0f c0       	rjmp	.+30     	; 0x942 <__stack+0xe3>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	61 e0       	ldi	r22, 0x01	; 1
 928:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
 92c:	82 e0       	ldi	r24, 0x02	; 2
 92e:	61 e0       	ldi	r22, 0x01	; 1
 930:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				Timer0_vDelayms(500);
 934:	84 ef       	ldi	r24, 0xF4	; 244
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
			LED_voidON(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN ON
			Timer0_vDelayms(5000);
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN OFF
			for(u8 i=0;i<10;i++)
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	8b 83       	std	Y+3, r24	; 0x03
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	8a 30       	cpi	r24, 0x0A	; 10
 946:	70 f3       	brcs	.-36     	; 0x924 <__stack+0xc5>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
				Timer0_vDelayms(500);
			}
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 ); //T_YELLOW OFF
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN1 ); //P_YELLOW OFF
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidON(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED ON
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	62 e0       	ldi	r22, 0x02	; 2
 964:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			Timer0_vDelayms(5000);
 968:	88 e8       	ldi	r24, 0x88	; 136
 96a:	93 e1       	ldi	r25, 0x13	; 19
 96c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	62 e0       	ldi	r22, 0x02	; 2
 974:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED OFF
 978:	82 e0       	ldi	r24, 0x02	; 2
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
 988:	77 c0       	rjmp	.+238    	; 0xa78 <__stack+0x219>
		}
		else
		{

			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED OFF
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	62 e0       	ldi	r22, 0x02	; 2
 996:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			for(u8 i=0;i<10;i++)
 99a:	1a 82       	std	Y+2, r1	; 0x02
 99c:	0f c0       	rjmp	.+30     	; 0x9bc <__stack+0x15d>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
 9a6:	82 e0       	ldi	r24, 0x02	; 2
 9a8:	61 e0       	ldi	r22, 0x01	; 1
 9aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				Timer0_vDelayms(500);
 9ae:	84 ef       	ldi	r24, 0xF4	; 244
 9b0:	91 e0       	ldi	r25, 0x01	; 1
 9b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
		else
		{

			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED OFF
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF
			for(u8 i=0;i<10;i++)
 9b6:	8a 81       	ldd	r24, Y+2	; 0x02
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	8a 81       	ldd	r24, Y+2	; 0x02
 9be:	8a 30       	cpi	r24, 0x0A	; 10
 9c0:	70 f3       	brcs	.-36     	; 0x99e <__stack+0x13f>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
				Timer0_vDelayms(500);
			}
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 ); //T_YELLOW OFF
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN1 ); //P_YELLOW OFF
 9ca:	82 e0       	ldi	r24, 0x02	; 2
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			LED_voidON(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN ON
 9da:	82 e0       	ldi	r24, 0x02	; 2
 9dc:	62 e0       	ldi	r22, 0x02	; 2
 9de:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			Timer0_vDelayms(5000);
 9e2:	88 e8       	ldi	r24, 0x88	; 136
 9e4:	93 e1       	ldi	r25, 0x13	; 19
 9e6:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN OFF
 9f2:	82 e0       	ldi	r24, 0x02	; 2
 9f4:	62 e0       	ldi	r22, 0x02	; 2
 9f6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 ); //T_YELLOW ON
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN1 ); //P_YELLOW ON
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			for(u8 i=0;i<10;i++)
 a0a:	19 82       	std	Y+1, r1	; 0x01
 a0c:	0f c0       	rjmp	.+30     	; 0xa2c <__stack+0x1cd>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	61 e0       	ldi	r22, 0x01	; 1
 a12:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
				Timer0_vDelayms(500);
 a1e:	84 ef       	ldi	r24, 0xF4	; 244
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			Timer0_vDelayms(5000);
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN2 ); //P_GREEN OFF
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 ); //T_YELLOW ON
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN1 ); //P_YELLOW ON
			for(u8 i=0;i<10;i++)
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	8f 5f       	subi	r24, 0xFF	; 255
 a2a:	89 83       	std	Y+1, r24	; 0x01
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
 a2e:	8a 30       	cpi	r24, 0x0A	; 10
 a30:	70 f3       	brcs	.-36     	; 0xa0e <__stack+0x1af>
			{
				LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
				LED_voidTOGGLE(DIO_u8PORTB,DIO_u8PIN1); //P_YELLOW BLINKING
				Timer0_vDelayms(500);
			}
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 ); //T_YELLOW OFF
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN1 ); //P_YELLOW OFF
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidON(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED ON
 a42:	82 e0       	ldi	r24, 0x02	; 2
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	62 e0       	ldi	r22, 0x02	; 2
 a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
			Timer0_vDelayms(5000);
 a52:	88 e8       	ldi	r24, 0x88	; 136
 a54:	93 e1       	ldi	r25, 0x13	; 19
 a56:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
			LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	62 e0       	ldi	r22, 0x02	; 2
 a5e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			LED_voidOFF(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED OFF
 a62:	82 e0       	ldi	r24, 0x02	; 2
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
			if (Local_u8GreenState==ON)  //CHEEK IF GREEN IS ON
 a6a:	89 85       	ldd	r24, Y+9	; 0x09
 a6c:	81 30       	cpi	r24, 0x01	; 1
 a6e:	21 f4       	brne	.+8      	; 0xa78 <__stack+0x219>
			{
				//LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
				//LED_voidON(DIO_u8PORTB,DIO_u8PIN0 ); //P_RED ON
				//Timer0_vDelayms(5000);
				LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	62 e0       	ldi	r22, 0x02	; 2
 a74:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>

			}

		}
	}
}
 a78:	29 96       	adiw	r28, 0x09	; 9
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	cd bf       	out	0x3d, r28	; 61
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	ff 91       	pop	r31
 a84:	ef 91       	pop	r30
 a86:	bf 91       	pop	r27
 a88:	af 91       	pop	r26
 a8a:	9f 91       	pop	r25
 a8c:	8f 91       	pop	r24
 a8e:	7f 91       	pop	r23
 a90:	6f 91       	pop	r22
 a92:	5f 91       	pop	r21
 a94:	4f 91       	pop	r20
 a96:	3f 91       	pop	r19
 a98:	2f 91       	pop	r18
 a9a:	0f 90       	pop	r0
 a9c:	0f be       	out	0x3f, r0	; 63
 a9e:	0f 90       	pop	r0
 aa0:	1f 90       	pop	r1
 aa2:	18 95       	reti

00000aa4 <main>:
#include "APP/app.h"

int main(void)
{
 aa4:	df 93       	push	r29
 aa6:	cf 93       	push	r28
 aa8:	00 d0       	rcall	.+0      	; 0xaaa <main+0x6>
 aaa:	cd b7       	in	r28, 0x3d	; 61
 aac:	de b7       	in	r29, 0x3e	; 62
	App_Start();
 aae:	0e 94 16 04 	call	0x82c	; 0x82c <App_Start>
	while(1)
	{

		LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	62 e0       	ldi	r22, 0x02	; 2
 ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
		Timer0_vDelayms(5000);
 aba:	88 e8       	ldi	r24, 0x88	; 136
 abc:	93 e1       	ldi	r25, 0x13	; 19
 abe:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	62 e0       	ldi	r22, 0x02	; 2
 ac6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>

		for(u8 i=0;i<10;i++)
 aca:	1a 82       	std	Y+2, r1	; 0x02
 acc:	0b c0       	rjmp	.+22     	; 0xae4 <main+0x40>
		{
			LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	61 e0       	ldi	r22, 0x01	; 1
 ad2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
			Timer0_vDelayms(500);
 ad6:	84 ef       	ldi	r24, 0xF4	; 244
 ad8:	91 e0       	ldi	r25, 0x01	; 1
 ada:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>

		LED_voidON(DIO_u8PORTA,DIO_u8PIN2 ); //T_GREEN ON
		Timer0_vDelayms(5000);
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN2 );  //T_GREEN OFF

		for(u8 i=0;i<10;i++)
 ade:	8a 81       	ldd	r24, Y+2	; 0x02
 ae0:	8f 5f       	subi	r24, 0xFF	; 255
 ae2:	8a 83       	std	Y+2, r24	; 0x02
 ae4:	8a 81       	ldd	r24, Y+2	; 0x02
 ae6:	8a 30       	cpi	r24, 0x0A	; 10
 ae8:	90 f3       	brcs	.-28     	; 0xace <main+0x2a>
		{
			LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
			Timer0_vDelayms(500);
		}
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 );  //T_YELLOW OFF
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
		LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	60 e0       	ldi	r22, 0x00	; 0
 af6:	0e 94 c5 03 	call	0x78a	; 0x78a <LED_voidON>
		Timer0_vDelayms(5000);
 afa:	88 e8       	ldi	r24, 0x88	; 136
 afc:	93 e1       	ldi	r25, 0x13	; 19
 afe:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
		for(u8 i=0;i<10;i++)
 b0a:	19 82       	std	Y+1, r1	; 0x01
 b0c:	0b c0       	rjmp	.+22     	; 0xb24 <main+0x80>
		{
			LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	61 e0       	ldi	r22, 0x01	; 1
 b12:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED_voidTOGGLE>
			Timer0_vDelayms(500);
 b16:	84 ef       	ldi	r24, 0xF4	; 244
 b18:	91 e0       	ldi	r25, 0x01	; 1
 b1a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer0_vDelayms>
		}
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 );  //T_YELLOW OFF
		LED_voidON(DIO_u8PORTA,DIO_u8PIN0 ); //T_RED ON
		Timer0_vDelayms(5000);
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN0 );  //T_RED OFF
		for(u8 i=0;i<10;i++)
 b1e:	89 81       	ldd	r24, Y+1	; 0x01
 b20:	8f 5f       	subi	r24, 0xFF	; 255
 b22:	89 83       	std	Y+1, r24	; 0x01
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	8a 30       	cpi	r24, 0x0A	; 10
 b28:	90 f3       	brcs	.-28     	; 0xb0e <main+0x6a>
		{
			LED_voidTOGGLE(DIO_u8PORTA,DIO_u8PIN1); //T_YELLOW BLINKING
			Timer0_vDelayms(500);
		}
		LED_voidOFF(DIO_u8PORTA,DIO_u8PIN1 );  //T_YELLOW OFF
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_voidOFF>
 b32:	bf cf       	rjmp	.-130    	; 0xab2 <main+0xe>

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
